// Code generated by Kitex v0.3.0. DO NOT EDIT.

package user

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/wannabea/OnlineJudge/announcement/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceInfo
}

var userServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "User"
	handlerType := (*user.User)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetNameById":    kitex.NewMethodInfo(getNameByIdHandler, newUserGetNameByIdArgs, newUserGetNameByIdResult, false),
		"GetInfoById":    kitex.NewMethodInfo(getInfoByIdHandler, newUserGetInfoByIdArgs, newUserGetInfoByIdResult, false),
		"InsertUser":     kitex.NewMethodInfo(insertUserHandler, newUserInsertUserArgs, newUserInsertUserResult, false),
		"updateUserInfo": kitex.NewMethodInfo(updateUserInfoHandler, newUserUpdateUserInfoArgs, newUserUpdateUserInfoResult, false),
		"checkUserName":  kitex.NewMethodInfo(checkUserNameHandler, newUserCheckUserNameArgs, newUserCheckUserNameResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.0",
		Extra:           extra,
	}
	return svcInfo
}

func getNameByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserGetNameByIdArgs)
	realResult := result.(*user.UserGetNameByIdResult)
	success, err := handler.(user.User).GetNameById(ctx, realArg.UserId)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserGetNameByIdArgs() interface{} {
	return user.NewUserGetNameByIdArgs()
}

func newUserGetNameByIdResult() interface{} {
	return user.NewUserGetNameByIdResult()
}

func getInfoByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserGetInfoByIdArgs)
	realResult := result.(*user.UserGetInfoByIdResult)
	success, err := handler.(user.User).GetInfoById(ctx, realArg.UserId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserGetInfoByIdArgs() interface{} {
	return user.NewUserGetInfoByIdArgs()
}

func newUserGetInfoByIdResult() interface{} {
	return user.NewUserGetInfoByIdResult()
}

func insertUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserInsertUserArgs)
	realResult := result.(*user.UserInsertUserResult)
	success, err := handler.(user.User).InsertUser(ctx, realArg.Info)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserInsertUserArgs() interface{} {
	return user.NewUserInsertUserArgs()
}

func newUserInsertUserResult() interface{} {
	return user.NewUserInsertUserResult()
}

func updateUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserUpdateUserInfoArgs)
	realResult := result.(*user.UserUpdateUserInfoResult)
	success, err := handler.(user.User).UpdateUserInfo(ctx, realArg.Info)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserUpdateUserInfoArgs() interface{} {
	return user.NewUserUpdateUserInfoArgs()
}

func newUserUpdateUserInfoResult() interface{} {
	return user.NewUserUpdateUserInfoResult()
}

func checkUserNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserCheckUserNameArgs)
	realResult := result.(*user.UserCheckUserNameResult)
	success, err := handler.(user.User).CheckUserName(ctx, realArg.Name)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newUserCheckUserNameArgs() interface{} {
	return user.NewUserCheckUserNameArgs()
}

func newUserCheckUserNameResult() interface{} {
	return user.NewUserCheckUserNameResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetNameById(ctx context.Context, userId int32) (r string, err error) {
	var _args user.UserGetNameByIdArgs
	_args.UserId = userId
	var _result user.UserGetNameByIdResult
	if err = p.c.Call(ctx, "GetNameById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetInfoById(ctx context.Context, userId int32) (r *user.UserInfo, err error) {
	var _args user.UserGetInfoByIdArgs
	_args.UserId = userId
	var _result user.UserGetInfoByIdResult
	if err = p.c.Call(ctx, "GetInfoById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InsertUser(ctx context.Context, info *user.InsertUserInfo) (r int32, err error) {
	var _args user.UserInsertUserArgs
	_args.Info = info
	var _result user.UserInsertUserResult
	if err = p.c.Call(ctx, "InsertUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateUserInfo(ctx context.Context, info *user.InsertUserInfo) (r int32, err error) {
	var _args user.UserUpdateUserInfoArgs
	_args.Info = info
	var _result user.UserUpdateUserInfoResult
	if err = p.c.Call(ctx, "updateUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckUserName(ctx context.Context, name string) (r int32, err error) {
	var _args user.UserCheckUserNameArgs
	_args.Name = name
	var _result user.UserCheckUserNameResult
	if err = p.c.Call(ctx, "checkUserName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
